#!/usr/bin/env python
import sys
import os
import getopt
import urllib2
#import httplib2
import commands
import shutil
import fnmatch
import codecs
import urlparse
import string
import glob
import re

opts, args = getopt.getopt(sys.argv[1:], "f:h", ['format=','help'])

__opt_format = 'cover,pdf,epub,mobi'

def help():
    print 'Examples:'
    print 'sphinx-cook -f cover,pdf,epub,mobi /path/to/ebook'

for a, o in opts:
    if a in ('-h', '--help'):
        help()
        exit()
    if a in ('-f', '--format'):
        __opt_format = o

if len(args) == 0:
    print 'No path specified.'
    exit()

print 'sphinx-cook processing...'

rootPath = os.path.abspath(args[0])

print 'ebook path: ', rootPath

os.chdir(rootPath)

print "download required files..."

__cache_path = os.getenv('HOME')+'/.sphinx-cook'
__cache_conf_path = __cache_path+'/conf.py'
__cache_makefile_path = __cache_path+'/Makefile'

if not os.path.exists(__cache_path):
    os.mkdir(__cache_path)

def readcache(remote, local):
    if not os.path.exists(local):
        remotefile = urllib2.urlopen(remote)
        localFile = open(local, 'w')
        localFile.write(remotefile.read())
        localFile.close()

readcache('https://github.com/contpub/sphinx-cook/raw/master/toolkit/conf.py', __cache_conf_path)
readcache('https://github.com/contpub/sphinx-cook/raw/master/toolkit/Makefile', __cache_makefile_path)
shutil.copy(__cache_conf_path, '.')
shutil.copy(__cache_makefile_path, '.')

# download images

images = []

imageLocalPattern = re.compile('^[a-zA-Z0-9\-\_]+\.(gif|png|jpg|jpeg|tiff|eps)$', re.IGNORECASE)

for rstPath in glob.glob('*.rst'):
    print 'scanning %s' % rstPath
    lines = codecs.open(rstPath, 'r', 'utf-8').readlines()
    for line in lines:
        if line[:10] == '   @image:':
            print 'found %s' % line.strip()
            idx = line.find(':')
            tokens = line[idx+2:len(line)-1].strip().split(' ')
            if len(tokens) >= 2:
                remote = tokens[0].strip()
                local = tokens[1].strip()
                if imageLocalPattern.match(local):
                    images.append( [remote, local] )

# Read configuration from index.rst
lines = codecs.open('index.rst', 'r', 'utf-8').readlines()
rstconf = {}
rstconf['pdf_cover'] = None

for line in lines:
    if line[:4] == '   @':
        idx = line.find(':')
        rstconf[line[4:idx]] = line[idx+2:len(line)-1]

if len(images) > 0:
    for img in images:
        print 'download: ', img[0]
        try:
            headers = { 'User-Agent' : 'Mozilla/5.0' }
            request = urllib2.Request(img[0], None, headers)
            response = urllib2.urlopen(request)
            localFile = open(img[1], 'w')
            localFile.write(response.read())
            localFile.close()
            print 'saved.'
        except:
            print 'skipped.'

# Build

if not os.path.exists('cook'):
    os.mkdir('cook')

print "sphinx building..."

__formats = __opt_format.split(',')
__formats_cover = 'cover' in __formats
__formats_pdf = 'pdf' in __formats
__formats_epub = 'epub' in __formats
__formats_mobi = 'mobi' in __formats

if __formats_cover:
    print "make cover"
    if rstconf['pdf_cover']=='cover.tex':
        commands.getstatusoutput('make latexcover')
        shutil.copy('cover.png', rstconf['epub_cover'])
        shutil.copy('cover.pdf', 'cook/cover.pdf')
        os.remove('cover.png')
        os.remove('cover.pdf')
        rstconf['pdf_cover'] = 'cook/cover.pdf'

if __formats_pdf:
    print "make pdf"
    commands.getstatusoutput('make latexpdf')
    for root, dirnames, filenames in os.walk('_build/latex'):
        for filename in fnmatch.filter(filenames, '*.pdf'):
            if not filename.startswith('graphviz'):
                basename = os.path.splitext(os.path.basename(filename))[0]
                shutil.copy(os.path.join(root, filename), 'cook')
                if not rstconf['pdf_cover'] in (None, 'cover.tex'):
                    print "pdftk: add cover"
                    commands.getstatusoutput('pdftk cook/'+basename+'.pdf dump_data > .combine.info')
                    commands.getstatusoutput('pdftk '+rstconf['pdf_cover']+' cook/'+basename+'.pdf cat output .combine.pdf')
                    commands.getstatusoutput('pdftk .combine.pdf update_info .combine.info output cook/'+basename+'.pdf')
                    os.remove('.combine.info')
                    os.remove('.combine.pdf')
                # covert to portable pdf
                # commands.getstatusoutput('pdf2ps cook/'+filename+' cook/'+basename+'.ps')
                # commands.getstatusoutput('ps2pdf14 -dMaxSubsetPct=100 -dCompatibilityLevel=1.2 -dSubsetFonts=true -dEmbedAllFonts=true -dPDFSETTINGS=/prepress cook/'+basename+'.ps cook/'+basename+'.gs.pdf')
                # os.remove('cook/'+basename+'.ps')

if __formats_epub:
    print "epub"
    commands.getstatusoutput('make epub')
    for root, dirnames, filenames in os.walk('_build/epub'):
        for filename in fnmatch.filter(filenames, '*.epub'):
            shutil.copy(os.path.join(root, filename), 'cook')
 
if __formats_mobi:
    print "mobi"
    commands.getstatusoutput('make mobi')
    for root, dirnames, filenames in os.walk('_build/mobi'):
        for filename in fnmatch.filter(filenames, '*.mobi'):
            shutil.copy(os.path.join(root, filename), 'cook') 

print "cleanup"
commands.getstatusoutput('make clean')
shutil.rmtree('_build')
os.remove('conf.py')
os.remove('Makefile')

